@model IEnumerable<Zona_Geek.Models.ServicoVM>
﻿@{
    Layout = "/Views/Shared/_LayoutGerenciamento.cshtml";
}
<body style="background-color:   white">

    <section class="maneger-page-section">
        <div class="container page-maneger" style="background-color: white">

            <div class="add-user-button">
                <h1 class="section-title cliente-title-maneger">Gerenciamento de Serviços</h1>
                <br />
            </div>

            <div class="container">
                <div class="row">
                    <div class="col-md-6">
                        <div class="input-group mb-4">
                            <input id="filtro" type="text" class="form-control" placeholder="Pesquisar Serviços..." aria-label="Filtrar" aria-describedby="basic-addon2">
                        </div>
                    </div>
                    <div class="col-md-6 text-md-end">
                        <!-- Alteração para "text-md-end" para alinhar à direita apenas em telas médias e maiores -->
                        <button class="btn btn-success btn-lg" onclick="" data-bs-toggle="modal"
                                data-bs-target="#InserirServico">
                            <i class="fa fa-plus"></i> Adicionar Serviço
                        </button>
                    </div>
                </div>
            </div>
            <div style="max-height: 400px; overflow-y: auto;">
                <!-- Tabela com cabeçalho fixo -->
                <table id="TbServicos" class="table" style="width: 100%; border-collapse: collapse; table-layout: fixed;">
                    <!-- Cabeçalho fixo -->
                    <thead style="background-color: #315689; color: #EAE7DC;">
                        <tr>
                            <th style="border: 1px solid #315689; padding: 8px; width: 50px; position: sticky; top: 0; background-color: #315689; z-index: 2;">#</th>
                            <th style="border: 1px solid #315689; padding: 8px; width: 230px; position: sticky; top: 0; background-color: #315689; z-index: 2;">Tipo de Serviço</th>
                            <th style="border: 1px solid #315689; padding: 8px; width: 150px; position: sticky; top: 0; background-color: #315689; z-index: 2;">Valor</th>
                            <th class="editar" style="border: 1px solid #315689; padding: 8px; position: sticky; top: 0; background-color: #315689; z-index: 2;">Editar</th>
                            <th class="excluir" style="border: 1px solid #315689; padding: 8px; position: sticky; top: 0; background-color: #315689; z-index: 2;">Excluir</th>
                        </tr>
                    </thead>
                </table>

                <!-- Corpo da tabela rolável -->
                <div style="max-height: 300px; overflow-y: auto; overflow-x: hidden;">
                    <table id="TbServicosBody" class="table" style="width: 100%; border-collapse: collapse; table-layout: fixed;">
                        <tbody>
                            @if (Model != null && Model.Any())
                            {
                                @foreach (var servico in Model)
                                {
                                    <tr>
                                        <td style="color:  #315689; border: 1px solid  #315689; padding: 8px; width: 50px">@servico.id</td>
                                        <td style="color:  #315689; border: 1px solid  #315689; padding: 8px; width: 220px">@servico.TipoServico</td>
                                        <td style="color:  #315689; border: 1px solid  #315689; padding: 8px; width: 250px">@servico.Valor.ToString("C")</td> <!-- Formato de moeda -->

                                        <td class="text-center" style="border: 1px solid  #315689; width: 80px;">
                                            <button class="btn btn-default" onclick="definirEdt('@servico.id', '@servico.TipoServico', '@servico.Valor')" data-bs-toggle="modal" data-bs-target="#EditarServico" style="color:  #315689;">
                                                <i class="fa fa-edit"></i>
                                            </button>
                                        </td>
                                        <td class="text-center" style="border: 1px solid  #315689; width: 80px;">
                                            <button class="btn btn-default" onclick="definirExc('@servico.id', '@servico.TipoServico', '@servico.Valor')" data-bs-toggle="modal" data-bs-target="#ExcluirServico" style="color:  #315689;">
                                                <i class="fa fa-trash"></i>
                                            </button>
                                        </td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="5" style="text-align: center; color:  #315689; padding: 8px;">Nenhum serviço encontrado.</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>

            <!-- Contador de Registros Centralizado -->
            <div style="text-align: center; color: #315689; margin-top: 10px;">
                <strong style="font-size: 18px">Total de Serviços: <span id="registroCount">@Model.Count()</span></strong>
            </div>

        </div>
        
        </section>
    <div class="modal fade" id="EditarServico" tabindex="-1" aria-labelledby="exampleModalLabel"
         aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">

                <div class="modal-header" style="background-color:  #86b2d2;; color: white;">
                    <h1 class="modal-title" id="exampleModalLabel">Editar Serviço</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="mb-3 row">
                    <div class="col-md-6">
                        @Html.DropDownList("EdtTipoServico",
                                 new SelectList(ViewBag.Servicos, "Value", "Text", null),
                                 "Escolha o serviço",
                                 new { @class = "form-control", @style = "width:230px; background-color: white; color: #333;", required = "required" })
                    </div>
                    <div class="col-md-6">
                        <label style="color:red">*</label>
                    </div>
                </div>

                <div class="mb-3 row">
                    <div class="col-md-6">
                        <input id="EdtValor" type="number" class="form-control" placeholder="Digite o Valor">
                    </div>
                    <div class="col-md-6">
                        <label style="color:red">*</label>
                    </div>
                </div>

                <input type="hidden" id="EdtId" value="" />x


                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fechar</button>
                    <button type="button" class="btn btn-primary" onclick="AlterarServico()">Salvar</button>
                    <!--onclick para chamar a funcao de alteração-->
                </div>

            </div>
        </div>
    </div>

        <div class="modal fade" id="ExcluirServico" tabindex="-1" aria-labelledby="exampleModalLabel"
             aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header" style="background-color:  #86b2d2;; color: white; border-color: #eea236;">
                        <h1 class="modal-title" id="exampleModalLabel">Excluir Serviço</h1>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <form>
                            <div class="mb-3">
                                <label for="nome">Nome</label>
                                <input type="text" id="ExcServico" class="form-control" placeholder="Digite o Serviço..."
                                       readonly>
                            </div>

                            <input type="hidden" id="ExcId" class="form-control" placeholder="Digite seu nome..."
                                   readonly>

                        </form>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fechar</button>
                            <button type="button" onclick="ExcluirServico()" class="btn btn-primary">Excluir</button>
                        </div>

                    </div>

                </div>
            </div>
        </div>

        <div class="modal fade" id="InserirServico" tabindex="-1" aria-labelledby="exampleModalLabel"
             aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">

                    <div class="modal-header" style="background-color:  #86b2d2;; color: white;">
                        <h1 class="modal-title" id="exampleModalLabel">Adicionar Serviço</h1>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                        <div class="mb-3 row">
                            <div class="col-md-6">
                                @Html.DropDownList("TipoServico",
                                         new SelectList(ViewBag.Servicos, "Value", "Text", null),
                                         "Escolha o serviço",
                                 new { @class = "form-control", @style = "width:230px; background-color: white; color: #333;", required = "required" })
                            </div>
                            <div class="col-md-6">
                                <label style="color:red">*</label>
                            </div>
                        </div>

                            <div class="mb-3 row">
                                <div class="col-md-6">
                                    <input id="Valor" type="number" class="form-control" placeholder="Digite o Valor">
                                </div>
                            <div class="col-md-6">
                                <label style="color:red">*</label>
                            </div>
                            </div>

                            <input type="hidden" id="IdEdt" value="" />

                        
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Fechar</button>
                    <button type="button" class="btn btn-primary" onclick="AdicionarServico()">Adicionar</button>
                        <!--onclick para chamar a funcao de alteração-->
                    </div>
                
            </div>
                </div>
            </div>

    
        <script>
        document.addEventListener("DOMContentLoaded", function () {
            // Função para verificar se o campo foi preenchido e esconder o asterisco
            function verificarPreenchimento(campo, label) {
                // Verifica se o campo está preenchido (para input) ou se o select não tem o valor padrão
                if (campo.value.trim() !== "" || (campo.tagName === "SELECT" && campo.selectedIndex !== 0)) {
                    label.style.display = 'none'; // Esconde o asterisco
                } else {
                    label.style.display = 'inline'; // Exibe o asterisco se o campo estiver vazio
                }
            }

            // Função para adicionar os eventos de input e change nos campos
            function adicionarEventos() {
                // Campos a serem monitorados
                const campos = [
                    { id: '#TipoServico', type: 'select' },  // Campo select
                    { id: '#Valor', type: 'input' }         // Campo input
                ];

                campos.forEach(function (campoInfo) {
                    const campo = document.querySelector(campoInfo.id);
                    const label = campo.closest('.row').querySelector('label'); // Encontra o label associado ao campo

                    if (campoInfo.type === 'input') {
                        // Para campos de input, adicionar evento de 'input'
                        campo.addEventListener('input', function () {
                            verificarPreenchimento(campo, label);
                        });
                    } else if (campoInfo.type === 'select') {
                        // Para o select, adicionar evento de 'change'
                        campo.addEventListener('change', function () {
                            verificarPreenchimento(campo, label);
                        });
                    }

                    // Chama a função para inicializar o estado do campo ao carregar a página
                    verificarPreenchimento(campo, label);
                });
            }

            // Inicializa os eventos
            adicionarEventos();

            // Função para limpar os campos do modal quando for aberto
            window.limparCamposInserirServico = function () {
                // Limpar campos de texto
                document.querySelector('#Valor').value = '';
                document.querySelector('#TipoServico').selectedIndex = 0;  // Reseta o select para a opção "Escolha o tipo de Serviço"

                // Mostrar novamente os asteriscos
                const campos = [
                    { id: '#TipoServico', type: 'select' },
                    { id: '#Valor', type: 'input' }
                ];

                campos.forEach(function (campoInfo) {
                    const campo = document.querySelector(campoInfo.id);
                    const label = campo.closest('.row').querySelector('label');
                    label.style.display = 'inline'; // Mostrar asterisco
                });
            }
        });

        document.addEventListener("DOMContentLoaded", function () {
            // Função para verificar se o campo foi preenchido e esconder o asterisco
            function verificarPreenchimento(campo, label) {
                if (campo.value.trim() !== "" || (campo.tagName === "SELECT" && campo.selectedIndex !== 0)) {
                    label.style.display = 'none'; // Esconde o asterisco
                } else {
                    label.style.display = 'inline'; // Exibe o asterisco se o campo estiver vazio
                }
            }

            // Função para adicionar os eventos de input e change nos campos
            function adicionarEventos() {
                // Campos a serem monitorados
                const campos = [
                    { id: '#EdtTipoServico', type: 'select' },
                    { id: '#EdtValor', type: 'input' }
                ];

                campos.forEach(function (campoInfo) {
                    const campo = document.querySelector(campoInfo.id);
                    const label = campo.closest('.row').querySelector('label'); // Encontra o label associado ao campo

                    if (campoInfo.type === 'input') {
                        // Para campos de input, adicionar evento de 'input'
                        campo.addEventListener('input', function () {
                            verificarPreenchimento(campo, label);
                        });
                    } else if (campoInfo.type === 'select') {
                        // Para o select, adicionar evento de 'change'
                        campo.addEventListener('change', function () {
                            verificarPreenchimento(campo, label);
                        });
                    }

                    // Chama a função para inicializar o estado do campo ao carregar a página
                    verificarPreenchimento(campo, label);
                });
            }

            // Inicializa os eventos
            adicionarEventos();

            // Função que preenche os campos ao editar o serviço
            window.definirEdt = function (id, tiposervico, valor) {
                // Preenche os campos do formulário com os valores recebidos
                $('#EdtId').val(id);
                $('#EdtValor').val(valor);

                // Atualiza o tipo de serviço no dropdown
                if ($('#EdtTipoServico').length > 0) {
                    $('#EdtTipoServico option').filter(function () {
                        return $(this).text() === tiposervico;  // Comparando o texto do tipo de serviço
                    }).prop('selected', true);
                    $('#EdtTipoServico').trigger('chosen:updated');
                } else {
                    console.error("DropDownList 'EdtTipoServico' não encontrado.");
                }

                // Verifica o preenchimento dos campos e esconde os asteriscos
                const campos = [
                    { id: '#EdtTipoServico', type: 'select' },
                    { id: '#EdtValor', type: 'input' }
                ];

                // Chama a função de verificação para cada campo ao preencher os dados
                campos.forEach(function (campoInfo) {
                    const campo = document.querySelector(campoInfo.id);
                    const label = campo.closest('.row').querySelector('label');
                    verificarPreenchimento(campo, label);
                });
            }
        });

        function definirEdt(id, tiposervico, valor) {
            console.log("tiposervico recebido:", tiposervico);  // Verifique o valor que está sendo passado para a função

            $('#EdtId').val(id);
            $('#EdtValor').val(valor);

            if ($('#EdtTipoServico').length > 0) {
                console.log("Procurando valor no dropdown EdtTipoServico:", tiposervico);

                // Percorrer todas as opções para encontrar o valor correto
                var optionFound = false;

                $('#EdtTipoServico option').each(function () {
                    // Comparar o texto das opções com o texto recebido
                    if ($(this).text() === tiposervico) {
                        // Marca a opção como selecionada
                        $(this).prop('selected', true);
                        optionFound = true;
                    }
                });

                if (optionFound) {
                    // Atualiza o chosen, se necessário
                    $('#EdtTipoServico').trigger('chosen:updated');

                    // Imprime no console o valor da opção selecionada
                    var selectedValue = $('#EdtTipoServico').val();
                    console.log("Valor selecionado no dropdown EdtTipoServico:", selectedValue);
                } else {
                    console.log("Opção não encontrada no dropdown.");
                }
            } else {
                console.error("DropDownList 'EdtTipoServico' não encontrado.");
            }
        }

        function definirExc(id, nome, valor) {

            $('#ExcId').val(id);
            $('#ExcServico').val(nome);
            $('#ExcValor').val(valor);
        }

        function ExcluirServico() {
            var id = $('#ExcId').val();
            // Confirmar antes de excluir
            if (confirm("Você tem certeza que deseja excluir este serviço?")) {
                // Fazer a requisição AJAX para excluir o serviço
                $.ajax({
                    url: '/Servico/ExcluirServico',  // Substitua 'SeuController' pelo nome real do seu controller
                    type: 'POST',
                    data: { id: id },
                    success: function (response) {
                        // Verificar se a exclusão foi bem-sucedida
                        if (response.success) {

                            alert(response.message);  // Exibir mensagem de sucesso
                            $('#ExcluirServico').modal('hide'); // Exemplo de fechamento de modal
                            location.reload();  // Opcional: recarrega a página
                        } else {
                            alert(response.message);  // Caso haja erro
                        }
                    },
                    error: function (xhr, status, error) {
                        alert("Ocorreu um erro ao tentar excluir o serviço: " + error);
                    }
                });
            }
        }

        function AlterarServico() {

            var id = $('#EdtId').val();
            var tipoSevico = $('#EdtTipoServico option:selected').text()
            var valor = $('#EdtValor').val();

            // Fazer a requisição AJAX para atualizar o serviço
            $.ajax({
                url: '/Servico/AtualizarServico',  // Substitua 'SeuController' pelo nome real do seu controller
                type: 'POST',
                data: {
                    id: id,
                    TipoServico: tipoSevico,
                    Valor: valor
                },
                success: function (response) {
                    // Verificar se a atualização foi bem-sucedida
                    if (response.success) {
                        alert("Serviço " + tipoSevico + " alterado com sucesso!");
                        $('#EditarServico').modal('hide');
                        location.reload();  // Opcional: recarrega a página
                    } else {
                        alert(response.message); // Caso haja erro
                    }
                },
                error: function (xhr, status, error) {
                    alert("Ocorreu um erro ao tentar atualizar o serviço: " + error);
                }
            });
        }

        function AdicionarServico() {

            var tipoServico = $('#TipoServico option:selected').text();
            var Valor = $('#Valor').val();


            if (tipoServico === "" || tipoServico === "Escolha o tipo de Usuário") {
                alert("Por favor, selecione o tipo de usuário.");
                return;
            }
            if (Valor.trim() === "") {
                alert("Por favor, insira um email válido.");
                return;
            }


            // Objeto com os dados para enviar via AJAX
            var dados = {
                tipoServico: tipoServico,
                Valor: Valor
            };

            console.log(dados); // Verifica os dados antes de enviar

            // Requisição AJAX
            $.ajax({
                url: '@Url.Action("InserirServico", "Servico")', // Substitua "NomeDoController" pelo nome da sua controller
                type: 'POST',
                dataType: 'json',
                data: dados,
                success: function (response) {
                    // Exibe a mensagem de sucesso ou erro
                    if (response.success) {
                        alert(response.message);  // Exibe mensagem de sucesso
                        // Se necessário, fecha o modal ou faz outra ação aqui
                        $('#InserirServicoModal').modal('hide'); // Exemplo de fechamento de modal
                        location.reload();  // Opcional: recarrega a página
                    } else {
                        alert(response.message);  // Exibe mensagem de erro
                    }
                },
                error: function () {
                    alert('Erro ao processar a solicitação. Tente novamente.');
                }
            });
        }
        </script>

    </section>

</body>